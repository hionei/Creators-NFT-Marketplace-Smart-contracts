{
  "language": "Solidity",
  "sources": {
    "contracts/Crea2ors.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n//\n// ----------------------------------------------------------------------------\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// ----------------------------------------------------------------------------\n// Safe Math Library\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n  function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {\n    c = a + b;\n    require(c >= a, \"SafeAdd error\");\n  }\n\n  function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {\n    require(b <= a, \"SafeSub error\");\n    c = a - b;\n  }\n\n  function safeMul(uint256 a, uint256 b) public pure returns (uint256 c) {\n    c = a * b;\n    require(a == 0 || c / a == b);\n  }\n\n  function safeDiv(uint256 a, uint256 b) public pure returns (uint256 c) {\n    require(b > 0);\n    c = a / b;\n  }\n}\n\n// Context Library\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n}\n\n// Ownable Library\nabstract contract Ownable is Context {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor() {\n    _setOwner(_msgSender());\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view virtual returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public virtual onlyOwner {\n    _setOwner(address(0));\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    _setOwner(newOwner);\n  }\n\n  function _setOwner(address newOwner) private {\n    address oldOwner = _owner;\n    _owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n}\n\ncontract Crea2ors is IERC20, Ownable, SafeMath {\n  string public name;\n  string public symbol;\n  uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\n\n  uint256 public _totalSupply;\n\n  struct holder {\n    uint256 lockupAmount;\n    uint256 unlockTime;\n    bool bCreated;\n  }\n\n  mapping(address => uint256) public balances;\n  mapping(address => mapping(address => uint256)) public allowed;\n  mapping(address => holder) public holders;\n\n  address private _rewardPoolAddress = 0x26810913499451a31a9E17C0b021b326C0a73c94;\n  address private _developmentAddress = 0x5aAd91b0c9d866aCeC2768dcf500b38537F856Fb;\n  address private _MKTAddress = 0x4b1D5A0E5C2940A43B8881fD7c739C4F47b784C6;\n  address private _burnAddress = 0xcdD6D090efd7f5cbF52E40Cc49b09a5D368B9923;\n\n  /**\n   * Constrctor function\n   *\n   * Initializes contract with initial supply tokens to the creator of the contract\n   */\n  constructor() {\n    name = \"Crea2ors\";\n    symbol = \"CR2\";\n    decimals = 9;\n    _totalSupply = 10000000000 * 10**9;\n    //8 000 000 000 tokens to owner\n    //2 000 000 000 tokens to liquidity pool\n    uint256 amount2Owner = 8000000000 * 10**9;\n    balances[msg.sender] = amount2Owner;\n    balances[_rewardPoolAddress] = 2000000000 * 10**9;\n    emit Transfer(address(0), msg.sender, amount2Owner);\n  }\n\n  function totalSupply() public view override returns (uint256) {\n    return _totalSupply - balances[address(0)];\n  }\n\n  function balanceOf(address tokenOwner) public view override returns (uint256 balance) {\n    return balances[tokenOwner];\n  }\n\n  function allowance(address tokenOwner, address spender)\n    public\n    view\n    override\n    returns (uint256 remaining)\n  {\n    return allowed[tokenOwner][spender];\n  }\n\n  function approve(address spender, uint256 tokens) public override returns (bool success) {\n    allowed[msg.sender][spender] = tokens;\n    emit Approval(msg.sender, spender, tokens);\n    return true;\n  }\n\n  function transfer(address to, uint256 tokens) public override returns (bool success) {\n    //25% of tokens is locked only first time.\n    address from = msg.sender;\n\n    require(tokens <= balances[from], \"Amount Exceed!\");\n\n    if (balances[from] - holders[from].lockupAmount < tokens) {\n      require(\n        block.timestamp >= holders[from].unlockTime,\n        \"You can unlock tokens after 2 years from initial mintTime\"\n      );\n      holders[from].lockupAmount = 0;\n    }\n\n    if (!holders[to].bCreated) {\n      holders[to].lockupAmount = (tokens * 25) / 100;\n      holders[to].unlockTime = block.timestamp + 2 * 365 * 24 * 3600;\n      holders[to].bCreated = true;\n    }\n\n    balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n    //2.5% of transaction goes to burn address\n    //2.5% goes to development address\n    //2.5% goes to MKT address\n    uint256 amount2to = (tokens * 925) / 1000;\n    uint256 amountPiece = (tokens * 25) / 1000;\n\n    balances[to] = safeAdd(balances[to], amount2to);\n    balances[_MKTAddress] = safeAdd(balances[_MKTAddress], amountPiece);\n    balances[_developmentAddress] = safeAdd(balances[_developmentAddress], amountPiece);\n    _burn(amountPiece);\n\n    emit Transfer(msg.sender, to, amount2to);\n    return true;\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokens\n  ) public override returns (bool success) {\n    //25% of tokens is locked only first time.\n    require(tokens <= balances[from], \"Amount Exceed!\");\n\n    if (balances[from] - holders[from].lockupAmount < tokens) {\n      require(\n        block.timestamp >= holders[from].unlockTime,\n        \"You can unlock tokens after 2 years from initial mintTime\"\n      );\n      holders[from].lockupAmount = 0;\n    }\n\n    if (!holders[to].bCreated) {\n      holders[to].lockupAmount = (tokens * 25) / 100;\n      holders[to].unlockTime = block.timestamp + 2 * 365 * 24 * 3600;\n      holders[to].bCreated = true;\n    }\n\n    balances[from] = safeSub(balances[from], tokens);\n    allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n    //2.5% of transaction goes to burn address\n    //2.5% goes to development address\n    //2.5% goes to MKT address\n    uint256 amount2to = (tokens * 925) / 1000;\n    uint256 amountPiece = (tokens * 25) / 1000;\n\n    balances[to] = safeAdd(balances[to], amount2to);\n    balances[_MKTAddress] = safeAdd(balances[_MKTAddress], amountPiece);\n    balances[_developmentAddress] = safeAdd(balances[_developmentAddress], amountPiece);\n    _burn(amountPiece);\n\n    emit Transfer(from, to, amount2to);\n    return true;\n  }\n\n  function _mint(address account, uint256 amount) internal {\n    require(account != address(0), \"BRC20: mint to the zero address\");\n\n    _totalSupply = safeAdd(_totalSupply, amount);\n    balances[account] = safeAdd(balances[account], amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  function mint(uint256 amount) public onlyOwner returns (bool) {\n    _mint(_msgSender(), amount);\n    return true;\n  }\n\n  function _burn(uint256 amount) private {\n    balances[_burnAddress] = safeAdd(balances[_burnAddress], amount);\n    _totalSupply -= amount;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}