{
  "address": "0x64be4A2798973a284a37D82885C3f59b7e487D36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalLimit_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "cr2ContractAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "ContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "ContractURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "NFTTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "TokenURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_currentTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "curMintedSupplies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "getCurMintedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialSupplies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metaUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "royaltyFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemtest",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "royaltyAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "royaltyFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9856bd2d7519c4c2864a4f72cbf785b77579840a97ef0f0f44f194b005a105e4",
  "receipt": {
    "to": null,
    "from": "0x159BA9bf484318cE17825248641b5D8a7995f54b",
    "contractAddress": "0x64be4A2798973a284a37D82885C3f59b7e487D36",
    "transactionIndex": 0,
    "gasUsed": "2626108",
    "logsBloom": "0x
    "blockHash": "0x1bf2c81bf907d9572a66e10ef5f807e5de9d069fd9c2274122162ac32ac8bfab",
    "transactionHash": "0x9856bd2d7519c4c2864a4f72cbf785b77579840a97ef0f0f44f194b005a105e4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 933494,
        "transactionHash": "0x9856bd2d7519c4c2864a4f72cbf785b77579840a97ef0f0f44f194b005a105e4",
        "address": "0x64be4A2798973a284a37D82885C3f59b7e487D36",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000159ba9bf484318ce17825248641b5d8a7995f54b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1bf2c81bf907d9572a66e10ef5f807e5de9d069fd9c2274122162ac32ac8bfab"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 933494,
        "transactionHash": "0x9856bd2d7519c4c2864a4f72cbf785b77579840a97ef0f0f44f194b005a105e4",
        "address": "0x64be4A2798973a284a37D82885C3f59b7e487D36",
        "topics": [
          "0x1d2cdeb916b6deaba04691992f0644f09c3074ecd87caa51ded4a31ca49e590a"
        ],
        "data": "0x000000000000000000000000159ba9bf484318ce17825248641b5d8a7995f54b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000973646c666b6a6473660000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x1bf2c81bf907d9572a66e10ef5f807e5de9d069fd9c2274122162ac32ac8bfab"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 933494,
        "transactionHash": "0x9856bd2d7519c4c2864a4f72cbf785b77579840a97ef0f0f44f194b005a105e4",
        "address": "0x64be4A2798973a284a37D82885C3f59b7e487D36",
        "topics": [
          "0xd5ee5eaf65263bab5d569890714d123ad48a9e54409d35e71d374f3dd300bba0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000973646c666b6a6473660000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x1bf2c81bf907d9572a66e10ef5f807e5de9d069fd9c2274122162ac32ac8bfab"
      }
    ],
    "blockNumber": 933494,
    "cumulativeGasUsed": "2626108",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CREA@ORs",
    "CR2NFT",
    "sdlfkjdsf",
    10,
    "0x7Bc2c104CcbC7144593a61CE9778B84FF09EdF26"
  ],
  "numDeployments": 1,
  "solcInputHash": "56ed2b3e597fcbf72ab80012e7234044",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalLimit_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cr2ContractAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ContractURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NFTTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"TokenURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"curMintedSupplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getCurMintedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initialSupplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metaUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemtest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Crea2orsNFT_v5.1.sol\":\"Crea2orsNFT\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Crea2orsNFT_v5.1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: topstardev.703@gmail.com\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\ninterface ICrea2Crypto {\\n  function symbol() external view returns (string memory);\\n\\n  function transfer(address to, uint256 tokens) external;\\n\\n  function balanceOf(address addr) external returns (uint256);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokens\\n  ) external returns (bool);\\n\\n  function allowance(address owner, address spender) external returns (uint256);\\n}\\n\\ncontract Crea2orsNFT is ERC1155, Ownable, EIP712 {\\n  uint256 public _currentTokenID = 0;\\n  string private _contractURI;\\n  uint256 private tokenLimit;\\n  string public name;\\n  string public symbol;\\n  ICrea2Crypto cr2Contract;\\n\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n  mapping(uint256 => address) public royaltyAddresses; //NFT creator not owner\\n  mapping(uint256 => uint256) public initialSupplies;\\n  mapping(uint256 => uint256) public curMintedSupplies;\\n  mapping(uint256 => uint256) public royaltyFees;\\n  mapping(uint256 => string) private metaDataUris;\\n\\n  bool private constructed = false;\\n  string private constant SIGNING_DOMAIN = \\\"LazyNFT-Voucher\\\";\\n  string private constant SIGNATURE_VERSION = \\\"1\\\";\\n\\n  struct Sig {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n  }\\n\\n  struct NFTVoucher {\\n    uint256 tokenId;\\n    string metaUri;\\n    uint256 mintCount;\\n    uint256 mintPrice;\\n    uint256 initialSupply;\\n    uint256 royaltyFee;\\n    address royaltyAddress;\\n  }\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    string memory contractURI_,\\n    uint256 totalLimit_,\\n    address cr2ContractAddress_\\n  ) ERC1155(\\\"\\\") EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {\\n    constructed = true;\\n    tokenLimit = totalLimit_;\\n    name = name_;\\n    symbol = symbol_;\\n    cr2Contract = ICrea2Crypto(cr2ContractAddress_);\\n    emit ContractDeployed(msg.sender, contractURI_);\\n\\n    setContractURI(contractURI_);\\n  }\\n\\n  function getCurMintedSupply(uint256 tokenID) public view returns (uint256) {\\n    return curMintedSupplies[tokenID];\\n  }\\n\\n  function init(string memory _name, string memory _symbol) public {\\n    require(!constructed, \\\"ERC155 Tradeable must not be constructed yet\\\");\\n\\n    name = _name;\\n    symbol = _symbol;\\n  }\\n\\n  function setContractURI(string memory contractURI_) public payable onlyOwner {\\n    _contractURI = contractURI_;\\n\\n    emit ContractURIChanged(contractURI_);\\n  }\\n\\n  function redeemtest() public view returns (string memory) {\\n    return cr2Contract.symbol();\\n  }\\n\\n  function redeem(\\n    address redeemer,\\n    uint256 tokenId,\\n    string memory metaUri,\\n    uint256 initialSupply,\\n    uint256 mintPrice,\\n    uint256 mintCount,\\n    uint256 royaltyFee,\\n    address royaltyAddress\\n  ) public returns (uint256) {\\n    require(mintPrice < cr2Contract.balanceOf(msg.sender), \\\"insufficient funds\\\");\\n    require(initialSupply <= 1000, \\\"Initial supply cannot be more than 1000\\\");\\n    require(_currentTokenID < tokenLimit, \\\"Flushed nft total limit\\\");\\n    require(mintCount != 0, \\\"Can not mint Zero count\\\");\\n\\n    if (curMintedSupplies[tokenId] == 0) {\\n      require(mintCount < initialSupply, \\\"You can not mint over than initial Supply: first\\\");\\n      initialSupplies[_currentTokenID] = initialSupply;\\n      royaltyAddresses[_currentTokenID] = royaltyAddress;\\n      royaltyFees[_currentTokenID] = royaltyFee;\\n      setURI(_currentTokenID, metaUri);\\n      _mint(redeemer, _currentTokenID, mintCount, \\\"\\\");\\n      curMintedSupplies[_currentTokenID] += mintCount;\\n      _currentTokenID++;\\n      emit LazyMinted(_currentTokenID);\\n    } else {\\n      require(\\n        curMintedSupplies[tokenId] + mintCount < initialSupplies[tokenId],\\n        \\\"You can not mint over than initial supply: not first\\\"\\n      );\\n      _mint(redeemer, tokenId, mintCount, \\\"\\\");\\n      curMintedSupplies[tokenId] += mintCount;\\n      emit LazyMinted(tokenId);\\n    }\\n\\n    // when mint, transfer CREA2 token to NFT creator\\\\\\n    require(cr2Contract.allowance(msg.sender, address(this)) >= mintPrice, \\\"allowance is less\\\");\\n    cr2Contract.transferFrom(msg.sender, royaltyAddress, mintPrice);\\n    return tokenId;\\n  }\\n\\n  //This is transfer function\\n  function transferNFT(\\n    uint256 _id,\\n    uint256 _amount,\\n    address from,\\n    address to\\n  ) public {\\n    require(_amount > 0, \\\"Can not transfer zero NFT\\\");\\n\\n    // Send NFT to buyer\\n    safeTransferFrom(from, to, _id, _amount, \\\"\\\");\\n    emit NFTTransfered(_id, _amount, from, to);\\n  }\\n\\n  function setURI(uint256 _id, string memory _uri) public payable {\\n    require(_exists(_id), \\\"ERC1155#uri: NONEXISTENT_TOKEN\\\");\\n    metaDataUris[_id] = _uri;\\n    emit TokenURIChanged(_id, _uri);\\n  }\\n\\n  function uri(uint256 _id) public view override returns (string memory) {\\n    require(_exists(_id), \\\"ERC1155#uri: NONEXISTENT_TOKEN\\\");\\n\\n    string memory _tokenURI = metaDataUris[_id];\\n    return _tokenURI;\\n  }\\n\\n  function getRoyaltyFee(uint256 _id) public view returns (uint256) {\\n    return royaltyFees[_id];\\n  }\\n\\n  function getRoyaltyAddress(uint256 _id) public view returns (address) {\\n    return royaltyAddresses[_id];\\n  }\\n\\n  function batchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public payable {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n    );\\n    safeBatchTransferFrom(from, to, ids, amounts, data);\\n  }\\n\\n  function burn(uint256 _id, uint256 _amount) public payable onlyOwner {\\n    require(_exists(_id), \\\"ERC1155 #burn: NONEXISTENT_TOKEN\\\");\\n    _burn(msg.sender, _id, _amount);\\n  }\\n\\n  function contractURI() public view returns (string memory) {\\n    return _contractURI;\\n  }\\n\\n  function totalSupply(uint256 _id) public view returns (uint256) {\\n    return initialSupplies[_id];\\n  }\\n\\n  function _exists(uint256 _id) internal view returns (bool) {\\n    return royaltyAddresses[_id] != address(0);\\n  }\\n\\n  function _getNextTokenID() private view returns (uint256) {\\n    return _currentTokenID + 1;\\n  }\\n\\n  function _incrementTokenTypeId() private {\\n    _currentTokenID++;\\n  }\\n\\n  event ContractDeployed(address, string);\\n  event ContractURIChanged(string);\\n  event TokenURIChanged(uint256, string);\\n  event LazyMinted(uint256);\\n  event NFTTransfered(uint256, uint256, address, address);\\n}\\n\",\"keccak256\":\"0x35ea211a330f0fe3dcac9b79cca5d2699efa4881934f3eed32a641ad623f624f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040526000600455600f805460ff191690553480156200002157600080fd5b506040516200316d3803806200316d83398101604081905262000044916200048b565b6040518060400160405280600f81526020016e2630bd3ca7232a16ab37bab1b432b960891b815250604051806040016040528060018152602001603160f81b81525060405180602001604052806000815250620000a781620001ef60201b60201c565b50620000b33362000208565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c052610120525050600f805460ff191660011790555050600682905584516200016b9060079060208801906200030b565b508351620001819060089060208701906200030b565b50600980546001600160a01b0319166001600160a01b0383161790556040517f1d2cdeb916b6deaba04691992f0644f09c3074ecd87caa51ded4a31ca49e590a90620001d1903390869062000578565b60405180910390a1620001e4836200025a565b5050505050620005ff565b8051620002049060029060208401906200030b565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6003546001600160a01b03163314620002b95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b8051620002ce9060059060208401906200030b565b507fd5ee5eaf65263bab5d569890714d123ad48a9e54409d35e71d374f3dd300bba081604051620003009190620005a6565b60405180910390a150565b8280546200031990620005c2565b90600052602060002090601f0160209004810192826200033d576000855562000388565b82601f106200035857805160ff191683800117855562000388565b8280016001018555821562000388579182015b82811115620003885782518255916020019190600101906200036b565b50620003969291506200039a565b5090565b5b808211156200039657600081556001016200039b565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620003e4578181015183820152602001620003ca565b83811115620003f4576000848401525b50505050565b600082601f8301126200040c57600080fd5b81516001600160401b0380821115620004295762000429620003b1565b604051601f8301601f19908116603f01168101908282118183101715620004545762000454620003b1565b816040528381528660208588010111156200046e57600080fd5b62000481846020830160208901620003c7565b9695505050505050565b600080600080600060a08688031215620004a457600080fd5b85516001600160401b0380821115620004bc57600080fd5b620004ca89838a01620003fa565b96506020880151915080821115620004e157600080fd5b620004ef89838a01620003fa565b955060408801519150808211156200050657600080fd5b506200051588828901620003fa565b60608801516080890151919550935090506001600160a01b03811681146200053c57600080fd5b809150509295509295909350565b6000815180845262000564816020860160208601620003c7565b601f01601f19169290920160200192915050565b6001600160a01b03831681526040602082018190526000906200059e908301846200054a565b949350505050565b602081526000620005bb60208301846200054a565b9392505050565b600181811c90821680620005d757607f821691505b60208210811415620005f957634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051612b306200063d600039600050506000505060005050600050506000505060005050612b306000f3fe6080604052600436106101e25760003560e01c8063862440e211610102578063b390c0ab11610095578063e985e9c511610064578063e985e9c5146105e2578063f06e6c9c1461062b578063f242432a1461063e578063f2fde38b1461065e57600080fd5b8063b390c0ab14610559578063bd85b0391461056c578063d539139314610599578063e8a3d485146105cd57600080fd5b806399156843116100d157806399156843146104bf5780639e4c0141146104ec578063a22cb46514610519578063a6f400fa1461053957600080fd5b8063862440e2146104665780638da5cb5b14610479578063938e3d7b1461049757806395d89b41146104aa57600080fd5b8063449283941161017a578063715018a611610149578063715018a6146103f9578063830394f51461040e578063832efb5a146104235780638584fa461461043957600080fd5b806344928394146103495780634e1273f41461037f57806361aa8b00146103ac5780637029144c146103d957600080fd5b80631bcf3e07116101b65780631bcf3e071461028c578063282b5063146102ac5780632eb2c2d6146102d957806335a05ad5146102fb57600080fd5b8062fdd58e146101e757806301ffc9a71461021a57806306fdde031461024a5780630e89341c1461026c575b600080fd5b3480156101f357600080fd5b50610207610202366004611fdb565b61067e565b6040519081526020015b60405180910390f35b34801561022657600080fd5b5061023a61023536600461201b565b610715565b6040519015158152602001610211565b34801561025657600080fd5b5061025f610767565b604051610211919061209b565b34801561027857600080fd5b5061025f6102873660046120ae565b6107f5565b34801561029857600080fd5b506102076102a736600461218c565b6108fb565b3480156102b857600080fd5b506102076102c73660046120ae565b6000908152600c602052604090205490565b3480156102e557600080fd5b506102f96102f43660046122ae565b610e87565b005b34801561030757600080fd5b506103316103163660046120ae565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610211565b34801561035557600080fd5b506103316103643660046120ae565b6000908152600a60205260409020546001600160a01b031690565b34801561038b57600080fd5b5061039f61039a366004612357565b610ed3565b604051610211919061245c565b3480156103b857600080fd5b506102076103c73660046120ae565b600d6020526000908152604090205481565b3480156103e557600080fd5b506102f96103f436600461246f565b610ffc565b34801561040557600080fd5b506102f9611090565b34801561041a57600080fd5b5061025f6110c6565b34801561042f57600080fd5b5061020760045481565b34801561044557600080fd5b506102076104543660046120ae565b600c6020526000908152604090205481565b6102f96104743660046124c8565b61114c565b34801561048557600080fd5b506003546001600160a01b0316610331565b6102f96104a5366004612504565b61120d565b3480156104b657600080fd5b5061025f611285565b3480156104cb57600080fd5b506102076104da3660046120ae565b600b6020526000908152604090205481565b3480156104f857600080fd5b506102076105073660046120ae565b6000908152600d602052604090205490565b34801561052557600080fd5b506102f961053436600461254e565b611292565b34801561054557600080fd5b506102f9610554366004612585565b6112a1565b6102f96105673660046125cb565b611363565b34801561057857600080fd5b506102076105873660046120ae565b6000908152600b602052604090205490565b3480156105a557600080fd5b506102077f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156105d957600080fd5b5061025f6113fc565b3480156105ee57600080fd5b5061023a6105fd3660046125ed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102f96106393660046122ae565b61148e565b34801561064a57600080fd5b506102f9610659366004612620565b6114d3565b34801561066a57600080fd5b506102f9610679366004612684565b61155a565b60006001600160a01b0383166106ef5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061074657506001600160e01b031982166303a24d0760e21b145b8061076157506301ffc9a760e01b6001600160e01b03198316145b92915050565b600780546107749061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546107a09061269f565b80156107ed5780601f106107c2576101008083540402835291602001916107ed565b820191906000526020600020905b8154815290600101906020018083116107d057829003601f168201915b505050505081565b6000818152600a60205260409020546060906001600160a01b031661085c5760405162461bcd60e51b815260206004820152601e60248201527f45524331313535237572693a204e4f4e4558495354454e545f544f4b454e000060448201526064016106e6565b6000828152600e6020526040812080546108759061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546108a19061269f565b80156108ee5780601f106108c3576101008083540402835291602001916108ee565b820191906000526020600020905b8154815290600101906020018083116108d157829003601f168201915b5093979650505050505050565b6009546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097991906126da565b85106109bc5760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b60448201526064016106e6565b6103e8861115610a1e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c20737570706c792063616e6e6f74206265206d6f72652074686044820152660616e20313030360cc1b60648201526084016106e6565b60065460045410610a715760405162461bcd60e51b815260206004820152601760248201527f466c7573686564206e667420746f74616c206c696d697400000000000000000060448201526064016106e6565b83610abe5760405162461bcd60e51b815260206004820152601760248201527f43616e206e6f74206d696e74205a65726f20636f756e7400000000000000000060448201526064016106e6565b6000888152600c6020526040902054610c2657858410610b395760405162461bcd60e51b815260206004820152603060248201527f596f752063616e206e6f74206d696e74206f766572207468616e20696e69746960448201526f185b0814dd5c1c1b1e4e88199a5c9cdd60821b60648201526084016106e6565b600480546000908152600b602090815260408083208a905583548352600a825280832080546001600160a01b0319166001600160a01b03881617905583548352600d909152902084905554610b8e908861114c565b610bab8960045486604051806020016040528060008152506115f5565b6004546000908152600c602052604081208054869290610bcc908490612709565b909155505060048054906000610be183612721565b91905055507f0cdae701ba22d312fc5289f8e5dcb104a74d66b544214e2f5d6c2c53c4e6f0db600454604051610c1991815260200190565b60405180910390a1610d28565b6000888152600b6020908152604080832054600c90925290912054610c4c908690612709565b10610cb65760405162461bcd60e51b815260206004820152603460248201527f596f752063616e206e6f74206d696e74206f766572207468616e20696e697469604482015273185b081cdd5c1c1b1e4e881b9bdd08199a5c9cdd60621b60648201526084016106e6565b610cd1898986604051806020016040528060008152506115f5565b6000888152600c602052604081208054869290610cef908490612709565b90915550506040518881527f0cdae701ba22d312fc5289f8e5dcb104a74d66b544214e2f5d6c2c53c4e6f0db9060200160405180910390a15b600954604051636eb1769f60e11b815233600482015230602482015286916001600160a01b03169063dd62ed3e90604401602060405180830381600087803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab91906126da565b1015610ded5760405162461bcd60e51b8152602060048201526011602482015270616c6c6f77616e6365206973206c65737360781b60448201526064016106e6565b6009546040516323b872dd60e01b81523360048201526001600160a01b03848116602483015260448201889052909116906323b872dd90606401602060405180830381600087803b158015610e4157600080fd5b505af1158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e79919061273c565b509698975050505050505050565b6001600160a01b038516331480610ea35750610ea385336105fd565b610ebf5760405162461bcd60e51b81526004016106e690612759565b610ecc85858585856116ff565b5050505050565b60608151835114610f385760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016106e6565b600083516001600160401b03811115610f5357610f536120c7565b604051908082528060200260200182016040528015610f7c578160200160208202803683370190505b50905060005b8451811015610ff457610fc7858281518110610fa057610fa06127ab565b6020026020010151858381518110610fba57610fba6127ab565b602002602001015161067e565b828281518110610fd957610fd96127ab565b6020908102919091010152610fed81612721565b9050610f82565b509392505050565b600f5460ff16156110645760405162461bcd60e51b815260206004820152602c60248201527f45524331353520547261646561626c65206d757374206e6f7420626520636f6e60448201526b1cdd1c9d58dd1959081e595d60a21b60648201526084016106e6565b8151611077906007906020850190611f26565b50805161108b906008906020840190611f26565b505050565b6003546001600160a01b031633146110ba5760405162461bcd60e51b81526004016106e6906127c1565b6110c460006118dc565b565b600954604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b15801561110b57600080fd5b505afa15801561111f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261114791908101906127f6565b905090565b6000828152600a60205260409020546001600160a01b03166111b05760405162461bcd60e51b815260206004820152601e60248201527f45524331313535237572693a204e4f4e4558495354454e545f544f4b454e000060448201526064016106e6565b6000828152600e6020908152604090912082516111cf92840190611f26565b507f483621391b5e72d74eb03c7b5715531c486e326fb115ab3bcf34b133041854ce8282604051611201929190612877565b60405180910390a15050565b6003546001600160a01b031633146112375760405162461bcd60e51b81526004016106e6906127c1565b805161124a906005906020840190611f26565b507fd5ee5eaf65263bab5d569890714d123ad48a9e54409d35e71d374f3dd300bba08160405161127a919061209b565b60405180910390a150565b600880546107749061269f565b61129d33838361192e565b5050565b600083116112f15760405162461bcd60e51b815260206004820152601960248201527f43616e206e6f74207472616e73666572207a65726f204e46540000000000000060448201526064016106e6565b61130d82828686604051806020016040528060008152506114d3565b60408051858152602081018590526001600160a01b03848116828401528316606082015290517f0175694a85af06487c85f5a70828f4869e67481fd566a8c0316a88059d0f58739181900360800190a150505050565b6003546001600160a01b0316331461138d5760405162461bcd60e51b81526004016106e6906127c1565b6000828152600a60205260409020546001600160a01b03166113f15760405162461bcd60e51b815260206004820181905260248201527f4552433131353520236275726e3a204e4f4e4558495354454e545f544f4b454e60448201526064016106e6565b61129d338383611a0f565b60606005805461140b9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546114379061269f565b80156114845780601f1061145957610100808354040283529160200191611484565b820191906000526020600020905b81548152906001019060200180831161146757829003601f168201915b5050505050905090565b6001600160a01b0385163314806114aa57506114aa85336105fd565b6114c65760405162461bcd60e51b81526004016106e690612759565b610ecc8585858585610e87565b6001600160a01b0385163314806114ef57506114ef85336105fd565b61154d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016106e6565b610ecc8585858585611b89565b6003546001600160a01b031633146115845760405162461bcd60e51b81526004016106e6906127c1565b6001600160a01b0381166115e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e6565b6115f2816118dc565b50565b6001600160a01b0384166116555760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016106e6565b3361166f8160008761166688611ca6565b610ecc88611ca6565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061169f908490612709565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610ecc81600087878787611cf1565b81518351146117615760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106e6565b6001600160a01b0384166117875760405162461bcd60e51b81526004016106e690612890565b3360005b845181101561186e5760008582815181106117a8576117a86127ab565b6020026020010151905060008583815181106117c6576117c66127ab565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156118165760405162461bcd60e51b81526004016106e6906128d5565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611853908490612709565b925050819055505050508061186790612721565b905061178b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118be92919061291f565b60405180910390a46118d4818787878787611e5c565b505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156119a25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016106e6565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316611a715760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016106e6565b33611aa181856000611a8287611ca6565b611a8b87611ca6565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b038816845290915290205482811015611b1e5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016106e6565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b038416611baf5760405162461bcd60e51b81526004016106e690612890565b33611bbf81878761166688611ca6565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611c005760405162461bcd60e51b81526004016106e6906128d5565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611c3d908490612709565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611c9d828888888888611cf1565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611ce057611ce06127ab565b602090810291909101015292915050565b6001600160a01b0384163b156118d45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d35908990899088908890889060040161294d565b602060405180830381600087803b158015611d4f57600080fd5b505af1925050508015611d7f575060408051601f3d908101601f19168201909252611d7c91810190612992565b60015b611e2c57611d8b6129af565b806308c379a01415611dc55750611da06129cb565b80611dab5750611dc7565b8060405162461bcd60e51b81526004016106e6919061209b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016106e6565b6001600160e01b0319811663f23a6e6160e01b14611c9d5760405162461bcd60e51b81526004016106e690612a54565b6001600160a01b0384163b156118d45760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611ea09089908990889088908890600401612a9c565b602060405180830381600087803b158015611eba57600080fd5b505af1925050508015611eea575060408051601f3d908101601f19168201909252611ee791810190612992565b60015b611ef657611d8b6129af565b6001600160e01b0319811663bc197c8160e01b14611c9d5760405162461bcd60e51b81526004016106e690612a54565b828054611f329061269f565b90600052602060002090601f016020900481019282611f545760008555611f9a565b82601f10611f6d57805160ff1916838001178555611f9a565b82800160010185558215611f9a579182015b82811115611f9a578251825591602001919060010190611f7f565b50611fa6929150611faa565b5090565b5b80821115611fa65760008155600101611fab565b80356001600160a01b0381168114611fd657600080fd5b919050565b60008060408385031215611fee57600080fd5b611ff783611fbf565b946020939093013593505050565b6001600160e01b0319811681146115f257600080fd5b60006020828403121561202d57600080fd5b813561203881612005565b9392505050565b60005b8381101561205a578181015183820152602001612042565b83811115612069576000848401525b50505050565b6000815180845261208781602086016020860161203f565b601f01601f19169290920160200192915050565b602081526000612038602083018461206f565b6000602082840312156120c057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612102576121026120c7565b6040525050565b60006001600160401b03821115612122576121226120c7565b50601f01601f191660200190565b600082601f83011261214157600080fd5b813561214c81612109565b60405161215982826120dd565b82815285602084870101111561216e57600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600080600080610100898b0312156121a957600080fd5b6121b289611fbf565b97506020890135965060408901356001600160401b038111156121d457600080fd5b6121e08b828c01612130565b965050606089013594506080890135935060a0890135925060c0890135915061220b60e08a01611fbf565b90509295985092959890939650565b60006001600160401b03821115612233576122336120c7565b5060051b60200190565b600082601f83011261224e57600080fd5b8135602061225b8261221a565b60405161226882826120dd565b83815260059390931b850182019282810191508684111561228857600080fd5b8286015b848110156122a3578035835291830191830161228c565b509695505050505050565b600080600080600060a086880312156122c657600080fd5b6122cf86611fbf565b94506122dd60208701611fbf565b935060408601356001600160401b03808211156122f957600080fd5b61230589838a0161223d565b9450606088013591508082111561231b57600080fd5b61232789838a0161223d565b9350608088013591508082111561233d57600080fd5b5061234a88828901612130565b9150509295509295909350565b6000806040838503121561236a57600080fd5b82356001600160401b038082111561238157600080fd5b818501915085601f83011261239557600080fd5b813560206123a28261221a565b6040516123af82826120dd565b83815260059390931b85018201928281019150898411156123cf57600080fd5b948201945b838610156123f4576123e586611fbf565b825294820194908201906123d4565b9650508601359250508082111561240a57600080fd5b506124178582860161223d565b9150509250929050565b600081518084526020808501945080840160005b8381101561245157815187529582019590820190600101612435565b509495945050505050565b6020815260006120386020830184612421565b6000806040838503121561248257600080fd5b82356001600160401b038082111561249957600080fd5b6124a586838701612130565b935060208501359150808211156124bb57600080fd5b5061241785828601612130565b600080604083850312156124db57600080fd5b8235915060208301356001600160401b038111156124f857600080fd5b61241785828601612130565b60006020828403121561251657600080fd5b81356001600160401b0381111561252c57600080fd5b61253884828501612130565b949350505050565b80151581146115f257600080fd5b6000806040838503121561256157600080fd5b61256a83611fbf565b9150602083013561257a81612540565b809150509250929050565b6000806000806080858703121561259b57600080fd5b84359350602085013592506125b260408601611fbf565b91506125c060608601611fbf565b905092959194509250565b600080604083850312156125de57600080fd5b50508035926020909101359150565b6000806040838503121561260057600080fd5b61260983611fbf565b915061261760208401611fbf565b90509250929050565b600080600080600060a0868803121561263857600080fd5b61264186611fbf565b945061264f60208701611fbf565b9350604086013592506060860135915060808601356001600160401b0381111561267857600080fd5b61234a88828901612130565b60006020828403121561269657600080fd5b61203882611fbf565b600181811c908216806126b357607f821691505b602082108114156126d457634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156126ec57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561271c5761271c6126f3565b500190565b6000600019821415612735576127356126f3565b5060010190565b60006020828403121561274e57600080fd5b815161203881612540565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561280857600080fd5b81516001600160401b0381111561281e57600080fd5b8201601f8101841361282f57600080fd5b805161283a81612109565b60405161284782826120dd565b82815286602084860101111561285c57600080fd5b61286d83602083016020870161203f565b9695505050505050565b828152604060208201526000612538604083018461206f565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006129326040830185612421565b82810360208401526129448185612421565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906129879083018461206f565b979650505050505050565b6000602082840312156129a457600080fd5b815161203881612005565b600060033d11156129c85760046000803e5060005160e01c5b90565b600060443d10156129d95790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612a0857505050505090565b8285019150815181811115612a205750505050505090565b843d8701016020828501011115612a3a5750505050505090565b612a49602082860101876120dd565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612ac890830186612421565b8281036060840152612ada8186612421565b90508281036080840152612aee818561206f565b9897505050505050505056fea26469706673582212204d54ab3f540fefee8ec44225d4542eb179f920cb5ecb9b26c1db089c73fd6a6964736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101e25760003560e01c8063862440e211610102578063b390c0ab11610095578063e985e9c511610064578063e985e9c5146105e2578063f06e6c9c1461062b578063f242432a1461063e578063f2fde38b1461065e57600080fd5b8063b390c0ab14610559578063bd85b0391461056c578063d539139314610599578063e8a3d485146105cd57600080fd5b806399156843116100d157806399156843146104bf5780639e4c0141146104ec578063a22cb46514610519578063a6f400fa1461053957600080fd5b8063862440e2146104665780638da5cb5b14610479578063938e3d7b1461049757806395d89b41146104aa57600080fd5b8063449283941161017a578063715018a611610149578063715018a6146103f9578063830394f51461040e578063832efb5a146104235780638584fa461461043957600080fd5b806344928394146103495780634e1273f41461037f57806361aa8b00146103ac5780637029144c146103d957600080fd5b80631bcf3e07116101b65780631bcf3e071461028c578063282b5063146102ac5780632eb2c2d6146102d957806335a05ad5146102fb57600080fd5b8062fdd58e146101e757806301ffc9a71461021a57806306fdde031461024a5780630e89341c1461026c575b600080fd5b3480156101f357600080fd5b50610207610202366004611fdb565b61067e565b6040519081526020015b60405180910390f35b34801561022657600080fd5b5061023a61023536600461201b565b610715565b6040519015158152602001610211565b34801561025657600080fd5b5061025f610767565b604051610211919061209b565b34801561027857600080fd5b5061025f6102873660046120ae565b6107f5565b34801561029857600080fd5b506102076102a736600461218c565b6108fb565b3480156102b857600080fd5b506102076102c73660046120ae565b6000908152600c602052604090205490565b3480156102e557600080fd5b506102f96102f43660046122ae565b610e87565b005b34801561030757600080fd5b506103316103163660046120ae565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610211565b34801561035557600080fd5b506103316103643660046120ae565b6000908152600a60205260409020546001600160a01b031690565b34801561038b57600080fd5b5061039f61039a366004612357565b610ed3565b604051610211919061245c565b3480156103b857600080fd5b506102076103c73660046120ae565b600d6020526000908152604090205481565b3480156103e557600080fd5b506102f96103f436600461246f565b610ffc565b34801561040557600080fd5b506102f9611090565b34801561041a57600080fd5b5061025f6110c6565b34801561042f57600080fd5b5061020760045481565b34801561044557600080fd5b506102076104543660046120ae565b600c6020526000908152604090205481565b6102f96104743660046124c8565b61114c565b34801561048557600080fd5b506003546001600160a01b0316610331565b6102f96104a5366004612504565b61120d565b3480156104b657600080fd5b5061025f611285565b3480156104cb57600080fd5b506102076104da3660046120ae565b600b6020526000908152604090205481565b3480156104f857600080fd5b506102076105073660046120ae565b6000908152600d602052604090205490565b34801561052557600080fd5b506102f961053436600461254e565b611292565b34801561054557600080fd5b506102f9610554366004612585565b6112a1565b6102f96105673660046125cb565b611363565b34801561057857600080fd5b506102076105873660046120ae565b6000908152600b602052604090205490565b3480156105a557600080fd5b506102077f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156105d957600080fd5b5061025f6113fc565b3480156105ee57600080fd5b5061023a6105fd3660046125ed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102f96106393660046122ae565b61148e565b34801561064a57600080fd5b506102f9610659366004612620565b6114d3565b34801561066a57600080fd5b506102f9610679366004612684565b61155a565b60006001600160a01b0383166106ef5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061074657506001600160e01b031982166303a24d0760e21b145b8061076157506301ffc9a760e01b6001600160e01b03198316145b92915050565b600780546107749061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546107a09061269f565b80156107ed5780601f106107c2576101008083540402835291602001916107ed565b820191906000526020600020905b8154815290600101906020018083116107d057829003601f168201915b505050505081565b6000818152600a60205260409020546060906001600160a01b031661085c5760405162461bcd60e51b815260206004820152601e60248201527f45524331313535237572693a204e4f4e4558495354454e545f544f4b454e000060448201526064016106e6565b6000828152600e6020526040812080546108759061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546108a19061269f565b80156108ee5780601f106108c3576101008083540402835291602001916108ee565b820191906000526020600020905b8154815290600101906020018083116108d157829003601f168201915b5093979650505050505050565b6009546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097991906126da565b85106109bc5760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b60448201526064016106e6565b6103e8861115610a1e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c20737570706c792063616e6e6f74206265206d6f72652074686044820152660616e20313030360cc1b60648201526084016106e6565b60065460045410610a715760405162461bcd60e51b815260206004820152601760248201527f466c7573686564206e667420746f74616c206c696d697400000000000000000060448201526064016106e6565b83610abe5760405162461bcd60e51b815260206004820152601760248201527f43616e206e6f74206d696e74205a65726f20636f756e7400000000000000000060448201526064016106e6565b6000888152600c6020526040902054610c2657858410610b395760405162461bcd60e51b815260206004820152603060248201527f596f752063616e206e6f74206d696e74206f766572207468616e20696e69746960448201526f185b0814dd5c1c1b1e4e88199a5c9cdd60821b60648201526084016106e6565b600480546000908152600b602090815260408083208a905583548352600a825280832080546001600160a01b0319166001600160a01b03881617905583548352600d909152902084905554610b8e908861114c565b610bab8960045486604051806020016040528060008152506115f5565b6004546000908152600c602052604081208054869290610bcc908490612709565b909155505060048054906000610be183612721565b91905055507f0cdae701ba22d312fc5289f8e5dcb104a74d66b544214e2f5d6c2c53c4e6f0db600454604051610c1991815260200190565b60405180910390a1610d28565b6000888152600b6020908152604080832054600c90925290912054610c4c908690612709565b10610cb65760405162461bcd60e51b815260206004820152603460248201527f596f752063616e206e6f74206d696e74206f766572207468616e20696e697469604482015273185b081cdd5c1c1b1e4e881b9bdd08199a5c9cdd60621b60648201526084016106e6565b610cd1898986604051806020016040528060008152506115f5565b6000888152600c602052604081208054869290610cef908490612709565b90915550506040518881527f0cdae701ba22d312fc5289f8e5dcb104a74d66b544214e2f5d6c2c53c4e6f0db9060200160405180910390a15b600954604051636eb1769f60e11b815233600482015230602482015286916001600160a01b03169063dd62ed3e90604401602060405180830381600087803b158015610d7357600080fd5b505af1158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab91906126da565b1015610ded5760405162461bcd60e51b8152602060048201526011602482015270616c6c6f77616e6365206973206c65737360781b60448201526064016106e6565b6009546040516323b872dd60e01b81523360048201526001600160a01b03848116602483015260448201889052909116906323b872dd90606401602060405180830381600087803b158015610e4157600080fd5b505af1158015610e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e79919061273c565b509698975050505050505050565b6001600160a01b038516331480610ea35750610ea385336105fd565b610ebf5760405162461bcd60e51b81526004016106e690612759565b610ecc85858585856116ff565b5050505050565b60608151835114610f385760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016106e6565b600083516001600160401b03811115610f5357610f536120c7565b604051908082528060200260200182016040528015610f7c578160200160208202803683370190505b50905060005b8451811015610ff457610fc7858281518110610fa057610fa06127ab565b6020026020010151858381518110610fba57610fba6127ab565b602002602001015161067e565b828281518110610fd957610fd96127ab565b6020908102919091010152610fed81612721565b9050610f82565b509392505050565b600f5460ff16156110645760405162461bcd60e51b815260206004820152602c60248201527f45524331353520547261646561626c65206d757374206e6f7420626520636f6e60448201526b1cdd1c9d58dd1959081e595d60a21b60648201526084016106e6565b8151611077906007906020850190611f26565b50805161108b906008906020840190611f26565b505050565b6003546001600160a01b031633146110ba5760405162461bcd60e51b81526004016106e6906127c1565b6110c460006118dc565b565b600954604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b15801561110b57600080fd5b505afa15801561111f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261114791908101906127f6565b905090565b6000828152600a60205260409020546001600160a01b03166111b05760405162461bcd60e51b815260206004820152601e60248201527f45524331313535237572693a204e4f4e4558495354454e545f544f4b454e000060448201526064016106e6565b6000828152600e6020908152604090912082516111cf92840190611f26565b507f483621391b5e72d74eb03c7b5715531c486e326fb115ab3bcf34b133041854ce8282604051611201929190612877565b60405180910390a15050565b6003546001600160a01b031633146112375760405162461bcd60e51b81526004016106e6906127c1565b805161124a906005906020840190611f26565b507fd5ee5eaf65263bab5d569890714d123ad48a9e54409d35e71d374f3dd300bba08160405161127a919061209b565b60405180910390a150565b600880546107749061269f565b61129d33838361192e565b5050565b600083116112f15760405162461bcd60e51b815260206004820152601960248201527f43616e206e6f74207472616e73666572207a65726f204e46540000000000000060448201526064016106e6565b61130d82828686604051806020016040528060008152506114d3565b60408051858152602081018590526001600160a01b03848116828401528316606082015290517f0175694a85af06487c85f5a70828f4869e67481fd566a8c0316a88059d0f58739181900360800190a150505050565b6003546001600160a01b0316331461138d5760405162461bcd60e51b81526004016106e6906127c1565b6000828152600a60205260409020546001600160a01b03166113f15760405162461bcd60e51b815260206004820181905260248201527f4552433131353520236275726e3a204e4f4e4558495354454e545f544f4b454e60448201526064016106e6565b61129d338383611a0f565b60606005805461140b9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546114379061269f565b80156114845780601f1061145957610100808354040283529160200191611484565b820191906000526020600020905b81548152906001019060200180831161146757829003601f168201915b5050505050905090565b6001600160a01b0385163314806114aa57506114aa85336105fd565b6114c65760405162461bcd60e51b81526004016106e690612759565b610ecc8585858585610e87565b6001600160a01b0385163314806114ef57506114ef85336105fd565b61154d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016106e6565b610ecc8585858585611b89565b6003546001600160a01b031633146115845760405162461bcd60e51b81526004016106e6906127c1565b6001600160a01b0381166115e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e6565b6115f2816118dc565b50565b6001600160a01b0384166116555760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016106e6565b3361166f8160008761166688611ca6565b610ecc88611ca6565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061169f908490612709565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610ecc81600087878787611cf1565b81518351146117615760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106e6565b6001600160a01b0384166117875760405162461bcd60e51b81526004016106e690612890565b3360005b845181101561186e5760008582815181106117a8576117a86127ab565b6020026020010151905060008583815181106117c6576117c66127ab565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156118165760405162461bcd60e51b81526004016106e6906128d5565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611853908490612709565b925050819055505050508061186790612721565b905061178b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118be92919061291f565b60405180910390a46118d4818787878787611e5c565b505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156119a25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016106e6565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316611a715760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016106e6565b33611aa181856000611a8287611ca6565b611a8b87611ca6565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b038816845290915290205482811015611b1e5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016106e6565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b038416611baf5760405162461bcd60e51b81526004016106e690612890565b33611bbf81878761166688611ca6565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611c005760405162461bcd60e51b81526004016106e6906128d5565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611c3d908490612709565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611c9d828888888888611cf1565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611ce057611ce06127ab565b602090810291909101015292915050565b6001600160a01b0384163b156118d45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d35908990899088908890889060040161294d565b602060405180830381600087803b158015611d4f57600080fd5b505af1925050508015611d7f575060408051601f3d908101601f19168201909252611d7c91810190612992565b60015b611e2c57611d8b6129af565b806308c379a01415611dc55750611da06129cb565b80611dab5750611dc7565b8060405162461bcd60e51b81526004016106e6919061209b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016106e6565b6001600160e01b0319811663f23a6e6160e01b14611c9d5760405162461bcd60e51b81526004016106e690612a54565b6001600160a01b0384163b156118d45760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611ea09089908990889088908890600401612a9c565b602060405180830381600087803b158015611eba57600080fd5b505af1925050508015611eea575060408051601f3d908101601f19168201909252611ee791810190612992565b60015b611ef657611d8b6129af565b6001600160e01b0319811663bc197c8160e01b14611c9d5760405162461bcd60e51b81526004016106e690612a54565b828054611f329061269f565b90600052602060002090601f016020900481019282611f545760008555611f9a565b82601f10611f6d57805160ff1916838001178555611f9a565b82800160010185558215611f9a579182015b82811115611f9a578251825591602001919060010190611f7f565b50611fa6929150611faa565b5090565b5b80821115611fa65760008155600101611fab565b80356001600160a01b0381168114611fd657600080fd5b919050565b60008060408385031215611fee57600080fd5b611ff783611fbf565b946020939093013593505050565b6001600160e01b0319811681146115f257600080fd5b60006020828403121561202d57600080fd5b813561203881612005565b9392505050565b60005b8381101561205a578181015183820152602001612042565b83811115612069576000848401525b50505050565b6000815180845261208781602086016020860161203f565b601f01601f19169290920160200192915050565b602081526000612038602083018461206f565b6000602082840312156120c057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612102576121026120c7565b6040525050565b60006001600160401b03821115612122576121226120c7565b50601f01601f191660200190565b600082601f83011261214157600080fd5b813561214c81612109565b60405161215982826120dd565b82815285602084870101111561216e57600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600080600080610100898b0312156121a957600080fd5b6121b289611fbf565b97506020890135965060408901356001600160401b038111156121d457600080fd5b6121e08b828c01612130565b965050606089013594506080890135935060a0890135925060c0890135915061220b60e08a01611fbf565b90509295985092959890939650565b60006001600160401b03821115612233576122336120c7565b5060051b60200190565b600082601f83011261224e57600080fd5b8135602061225b8261221a565b60405161226882826120dd565b83815260059390931b850182019282810191508684111561228857600080fd5b8286015b848110156122a3578035835291830191830161228c565b509695505050505050565b600080600080600060a086880312156122c657600080fd5b6122cf86611fbf565b94506122dd60208701611fbf565b935060408601356001600160401b03808211156122f957600080fd5b61230589838a0161223d565b9450606088013591508082111561231b57600080fd5b61232789838a0161223d565b9350608088013591508082111561233d57600080fd5b5061234a88828901612130565b9150509295509295909350565b6000806040838503121561236a57600080fd5b82356001600160401b038082111561238157600080fd5b818501915085601f83011261239557600080fd5b813560206123a28261221a565b6040516123af82826120dd565b83815260059390931b85018201928281019150898411156123cf57600080fd5b948201945b838610156123f4576123e586611fbf565b825294820194908201906123d4565b9650508601359250508082111561240a57600080fd5b506124178582860161223d565b9150509250929050565b600081518084526020808501945080840160005b8381101561245157815187529582019590820190600101612435565b509495945050505050565b6020815260006120386020830184612421565b6000806040838503121561248257600080fd5b82356001600160401b038082111561249957600080fd5b6124a586838701612130565b935060208501359150808211156124bb57600080fd5b5061241785828601612130565b600080604083850312156124db57600080fd5b8235915060208301356001600160401b038111156124f857600080fd5b61241785828601612130565b60006020828403121561251657600080fd5b81356001600160401b0381111561252c57600080fd5b61253884828501612130565b949350505050565b80151581146115f257600080fd5b6000806040838503121561256157600080fd5b61256a83611fbf565b9150602083013561257a81612540565b809150509250929050565b6000806000806080858703121561259b57600080fd5b84359350602085013592506125b260408601611fbf565b91506125c060608601611fbf565b905092959194509250565b600080604083850312156125de57600080fd5b50508035926020909101359150565b6000806040838503121561260057600080fd5b61260983611fbf565b915061261760208401611fbf565b90509250929050565b600080600080600060a0868803121561263857600080fd5b61264186611fbf565b945061264f60208701611fbf565b9350604086013592506060860135915060808601356001600160401b0381111561267857600080fd5b61234a88828901612130565b60006020828403121561269657600080fd5b61203882611fbf565b600181811c908216806126b357607f821691505b602082108114156126d457634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156126ec57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561271c5761271c6126f3565b500190565b6000600019821415612735576127356126f3565b5060010190565b60006020828403121561274e57600080fd5b815161203881612540565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561280857600080fd5b81516001600160401b0381111561281e57600080fd5b8201601f8101841361282f57600080fd5b805161283a81612109565b60405161284782826120dd565b82815286602084860101111561285c57600080fd5b61286d83602083016020870161203f565b9695505050505050565b828152604060208201526000612538604083018461206f565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006129326040830185612421565b82810360208401526129448185612421565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906129879083018461206f565b979650505050505050565b6000602082840312156129a457600080fd5b815161203881612005565b600060033d11156129c85760046000803e5060005160e01c5b90565b600060443d10156129d95790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612a0857505050505090565b8285019150815181811115612a205750505050505090565b843d8701016020828501011115612a3a5750505050505090565b612a49602082860101876120dd565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612ac890830186612421565b8281036060840152612ada8186612421565b90508281036080840152612aee818561206f565b9897505050505050505056fea26469706673582212204d54ab3f540fefee8ec44225d4542eb179f920cb5ecb9b26c1db089c73fd6a6964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 138,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2550,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "_currentTokenID",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2552,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "_contractURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2554,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "tokenLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2556,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2558,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2561,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "cr2Contract",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ICrea2Crypto)2541"
      },
      {
        "astId": 2570,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "royaltyAddresses",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2574,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "initialSupplies",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2578,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "curMintedSupplies",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2582,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "royaltyFees",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2586,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "metaDataUris",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2589,
        "contract": "contracts/Crea2orsNFT_v5.1.sol:Crea2orsNFT",
        "label": "constructed",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICrea2Crypto)2541": {
        "encoding": "inplace",
        "label": "contract ICrea2Crypto",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}